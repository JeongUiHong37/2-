아래 <참고내용>을 참고해서 Python 기반 FastAPI 백엔드와 HTML/CSS/JavaScript 프론트엔드로 웹 애플리케이션을 만들어줘. 디자인은 Dark Blue 톤의 고급스러운 스타일로 만들어줘. Streamlit은 사용하지 말고,  MockDB 폴더에 있는 파일들의 데이터를 사용해서 동작해야 해.

이 프로젝트는 사용자가 자연어로 품질/클레임 관련 질문을 입력하면, 시스템이 이를 해석하여 분석 방향을 제시하고, SQL을 생성하여 로컬 DB에서 데이터를 추출한 후 시각화하는 멀티턴 대화형 분석 시스템입니다.

---

### 전체 패널 구성 (첨부된 디자인 기준)

1. **좌측 상단 패널 - 지표 목록 패널**

   * 지표 항목은 대분류: `판매`, `원가`, `제철소`로 구성됨
   * `제철소` 클릭 시 `품질부적합`, `생산량`, `실수율` 세부 항목이 드롭다운 형태로 펼쳐짐
   * MVP에서는 `품질부적합` 항목만 선택 가능하며, 클릭 시 가운데 시각화 패널과 우측 대화 패널이 함께 활성화됨

2. **좌측 하단 패널 - 채팅방 목록 패널**

   * 사용자별 또는 주제별로 이전 대화 히스토리가 리스트 형태로 제공됨
   * 기존 대화를 클릭하면 해당 흐름이 복원됨

3. **가운데 패널 - 시각화 차트 패널**

   * LLM이 생성한 SQL 결과를 기반으로 생성된 차트를 누적하여 표시함
   * 차트는 위에서 아래로 스크롤되는 방식으로 계속 쌓이며, 이전 차트도 유지됨
   * 각 차트에는 다음 버튼이 함께 표시됨:

     * `SQL`: 해당 차트를 생성한 text-to-SQL 쿼리를 텍스트로 보여줌
     * `Data`: 현재는 동작하지 않는 더미 버튼
     * `Feedback`: 현재는 동작하지 않는 더미 버튼
     * `Copy`: 해당 차트를 이미지 형태로 클립보드에 복사함

4. **우측 패널 - LLM 대화 및 분석 패널**

   * 사용자가 자연어 질문을 입력하고, LLM의 분석 결과를 채팅 형태로 응답받는 공간
   * 분석 방향 제시, 확인 질문 여부 판단, SQL 출력, 요약 설명 등이 포함됨
   * 우측 상단에는 `Reset` 버튼이 있으며, 클릭 시 가운데 차트 패널, 우측 대화 패널, 대화 히스토리까지 모두 초기화됨

---

### 시스템 처리 흐름

1. 사용자가 자연어 질문을 입력하거나 좌측 상단에서 `품질부적합` 지표를 클릭함
2. 백엔드는 질문과 함께 사내 도메인 지식(지표 계산식, 테이블 구조, 용어 정의 등)을 포함한 프롬프트를 LLM에게 전달함
3. LLM은 먼저 queryType을 분류한 후, 분석 방향과 추가 확인 질문 필요 여부(needsConfirmation)를 판단함. **질문이 복합적인 경우 하나 이상의 SQL이 필요할 수 있다는 점도 자체 판단**함
4. 질문이 모호하거나 해석 가능한 항목이 둘 이상일 경우, LLM은 반드시 최소 1회 이상의 반문을 통해 사용자에게 기준을 되묻고, 명확해질 때까지 이를 반복함
5. confirmedIntent가 확보되면 LLM은 하나 이상의 SQL 쿼리를 생성함. 이때 SQL 간 조인이나 후처리 필요 여부도 함께 명시함
6. SQL은 SQLite DB에서 실행되어 데이터가 추출되며, 결과는 Pandas DataFrame 형태로 처리됨
7. LLM은 추출된 데이터를 기반으로 chartType, x/y 축 구성, series 분리 조건 등을 포함한 시각화 config와 summary 텍스트를 생성함
8. 시각화 결과는 가운데 패널에 누적 출력되고, SQL과 summary는 각각 SQL 버튼과 우측 대화 패널에 전달됨
9. 사용자가 새로운 질문을 입력하면, 기존 대화 흐름을 반영하여 다음 분석이 이어짐
10. `Reset` 버튼을 누르면 모든 상태가 초기화됨&#x20;

---

### 로컬 DB 테이블 구성

분석 시스템은 아래의 세 가지 테이블로 구성된 SQLite DB를 기반으로 작동합니다. Replit 개발자는 테스트용 더미 데이터를 직접 생성하여 로컬 DB에 채워야 하며, 다음 조건을 만족해야 합니다:

* 각 테이블은 월별로 약 10건 내외의 레코드를 포함해야 하며,
* `DAY_CD`, `EXPECTED_RESOLUTION_DATE`, `SALES_DATE`는 모두 'YYYYMMDD' 형식의 날짜 데이터로 구성하되, **2024년부터 2025년까지 월별로 고르게 분포**되도록 생성할 것

1. **TB\_SUM\_MQS\_QMHT200 (품질부적합통합실적)**

   * TR_F_PRODQUANTITY (제품생산량)
   * QLY_INC_HPW (품질부적합발생량)
   * DAY_CD (DW분석일구분)
   * ITEM_TYPE_GROUP_NAME (품종그룹명)
   * QLY_INC_HPN_FAC_TP_NM (품질부적합발생공장구분명)
   * QLY_INC_RESP_FAC_TP_NM (품질부적합책임공장구분명)
   * EX_A_MAST_GD_CAU_NM (외관종합등급원인명)
   * END_USER_NAME (최종고객사명)

2. **TB_S95_SALS_CLAM030 (클레임제기보상)**

   * END_USER_NAME (최종고객사명)
   * RMA_QTY (Claim보상금액)
   * ITEM_TYPE_GROUP_NAME (품종그룹명)
   * EXPECTED_RESOLUTION_DATE (Claim보상품의일자)

3. **TB_S95_A_GALA_SALESPROD (매출실적분석제품)**

   * END_USER_NAME (최종고객사명)
   * ITEM_TYPE_GROUP_NAME (품종그룹명)
   * SALE_QTY (매출액)
   * SALES_DATE (제품판매매출일자)

---

### 개발 시 유의사항

* 전체 시스템은 Python 기반으로 구성하고, 벡터스토어는 사용하지 않음
* 도메인 지식(지표 정의, 계산법 등)은 사람이 읽기 편하고 LLM이 쉽게 이해할 수 있도록 string 형태로 구성하며, 매 프롬프트마다 LLM에 삽입할 것
* 모든 분석 판단(분석 방향, SQL 생성, 차트 유형 추천)은 하드코딩 없이 LLM이 수행함
* needsConfirmation이 true인 경우, 반드시 confirmationQuestion 포함 후 사용자 응답을 받아야 다음 단계 진행 가능
* 멀티턴 대화 흐름은 프론트엔드 또는 백엔드에서 상태관리 방식으로 구현 가능함
* UI와 레이아웃, 디자인은 Dark Blue 톤의 고급스러운 스타일로 만들어줘

---

이 문서는 Replit 기반 환경에서 분석 시스템을 구현하기 위한 개발 가이드로, MVP 단계에서 필요한 모든 구성 요소와 동작 원리를 설명합니다.
